#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
install_usage() {
  if [[ -n $long_usage ]]; then
    printf "install - Helpers to setup Guy Veut\n"
    echo

  else
    printf "install - Helpers to setup Guy Veut\n"
    echo

  fi

  printf "%s\n" "$(bold "Usage:")"
  printf "  install COMMAND\n"
  printf "  install [COMMAND] --help | -h\n"
  printf "  install --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Slack app configuration\n" "$(green "slack")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "$(magenta "--version, -v")"
    printf "    Show version number\n"
    echo

  fi
}

# :command.usage
install_slack_usage() {
  if [[ -n $long_usage ]]; then
    printf "install slack - Slack app configuration\n"
    echo

  else
    printf "install slack - Slack app configuration\n"
    echo

  fi

  printf "Alias: s\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  install slack COMMAND\n"
  printf "  install slack [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "$(bold "Commands:")"
  printf "  %s   Create the Slack application (run it only once)\n" "$(green "create")"
  printf "  %s   Update the Slack application\n" "$(green "update")"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
install_slack_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "install slack create - Create the Slack application (run it only once)\n"
    echo

  else
    printf "install slack create - Create the Slack application (run it only once)\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  install slack create [OPTIONS]\n"
  printf "  install slack create --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--manifest, -m MANIFEST")"
    printf "    Path to the Slack manifest\n"
    printf "    Default: slack.json\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "SLACK_APP_CONF_TOKEN (required)")"
    printf "    Slack \"app configuration token\" - should be generated here >\n    https://api.slack.com/reference/manifests#config-tokens\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  ./install slack create --manifest ./folder/slack.json\n"
    echo

  fi
}

# :command.usage
install_slack_update_usage() {
  if [[ -n $long_usage ]]; then
    printf "install slack update - Update the Slack application\n"
    echo

  else
    printf "install slack update - Update the Slack application\n"
    echo

  fi

  printf "Alias: u\n"
  echo

  printf "%s\n" "$(bold "Usage:")"
  printf "  install slack update [OPTIONS]\n"
  printf "  install slack update --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "$(bold "Options:")"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "$(magenta "--app-id, -i APP-ID (required)")"
    printf "    Your Slack app id\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--manifest, -m MANIFEST")"
    printf "    Path to the Slack manifest\n"
    printf "    Default: slack.json\n"
    echo

    # :flag.usage
    printf "  %s\n" "$(magenta "--target, -t TARGET")"
    printf "    A domain to make slack point to (useful for local development)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "$(magenta "--help, -h")"
    printf "    Show this help\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "$(bold "Environment Variables:")"

    # :environment_variable.usage
    printf "  %s\n" "$(cyan "SLACK_APP_CONF_TOKEN (required)")"
    printf "    Slack \"app configuration token\" - should be generated here >\n    https://api.slack.com/reference/manifests#config-tokens\n"
    echo

    # :command.usage_examples
    printf "%s\n" "$(bold "Examples:")"
    printf "  ./install slack update --app-id A01... --manifest ./folder/slack.json\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# ./lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions

# :command.function
install_slack_create_command() {
  # ./slack_create_command.sh
  echo -e "Creating the Slack App..."

  JSON_MANIFEST=$(jq '{"manifest": .}' ${args[--manifest]} | jq -c .)
  JSON_MANIFEST="${JSON_MANIFEST//<<BANKER_ENDPOINT>>/'https://'"$(uuidgen)"'.fake'}"

REPORTS_ENDPOINT=$(cd packages/reports && serverless info --verbose | grep ServiceEndpoint | sed s/ServiceEndpoint\:\ //g)
JSON_MANIFEST="${JSON_MANIFEST//<<REPORTS_ENDPOINT>>/'https://'"$(uuidgen)"'.fake'}"

curl -X POST -H "Content-Type: application/json; charset=utf-8" \
    -H "Authorization: Bearer $SLACK_APP_CONF_TOKEN" \
    --data "${JSON_MANIFEST//[[:blank:]]/}" https://slack.com/api/apps.manifest.create

}

# :command.function
install_slack_update_command() {
  # ./slack_update_command.sh
  echo -e "Updating the Slack App..."

  JSON_MANIFEST=$(jq --arg APP_ID ${args[--app-id]} '{"app_id": $APP_ID, "manifest": .}' ${args[--manifest]} | jq -c .)
  if [ -z ${args[--target]} ]; then
      BANKER_ENDPOINT=$(cd packages/banker && serverless info --verbose | grep ServiceEndpoint | sed s/ServiceEndpoint\:\ //g)
      REPORTS_ENDPOINT=$(cd packages/reports && serverless info --verbose | grep ServiceEndpoint | sed s/ServiceEndpoint\:\ //g)
  else
      BANKER_ENDPOINT=${args[--target]}
      REPORTS_ENDPOINT=${args[--target]}
  fi
  JSON_MANIFEST="${JSON_MANIFEST//<<BANKER_ENDPOINT>>/"$BANKER_ENDPOINT"}"

JSON_MANIFEST="${JSON_MANIFEST//<<REPORTS_ENDPOINT>>/"$REPORTS_ENDPOINT"}"

curl -X POST -H "Content-Type: application/json; charset=utf-8" \
    -H "Authorization: Bearer $SLACK_APP_CONF_TOKEN" \
    --data "${JSON_MANIFEST//[[:blank:]]/}" https://slack.com/api/apps.manifest.update

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    slack | s)
      action="slack"
      shift
      install_slack_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      install_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
install_slack_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        install_slack_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if command -v jq >/dev/null 2>&1; then
    deps['jq']="$(command -v jq | head -n1)"
  else
    printf "missing dependency: jq\n" >&2
    exit 1
  fi

  if command -v curl >/dev/null 2>&1; then
    deps['curl']="$(command -v curl | head -n1)"
  else
    printf "missing dependency: curl\n" >&2
    exit 1
  fi

  if command -v serverless >/dev/null 2>&1; then
    deps['serverless']="$(command -v serverless | head -n1)"
  else
    printf "missing dependency: serverless\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    create | c)
      action="create"
      shift
      install_slack_create_parse_requirements "$@"
      shift $#
      ;;

    update | u)
      action="update"
      shift
      install_slack_update_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      install_slack_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
install_slack_create_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        install_slack_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("SLACK_APP_CONF_TOKEN")
  if [[ -z "${SLACK_APP_CONF_TOKEN:-}" ]]; then
    printf "missing required environment variable: SLACK_APP_CONF_TOKEN\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="slack create"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --manifest | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--manifest']="$2"
          shift
          shift
        else
          printf "%s\n" "--manifest requires an argument: --manifest, -m MANIFEST" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--manifest']:-} ]] || args['--manifest']="slack.json"

}

# :command.parse_requirements
install_slack_update_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        install_slack_update_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("SLACK_APP_CONF_TOKEN")
  if [[ -z "${SLACK_APP_CONF_TOKEN:-}" ]]; then
    printf "missing required environment variable: SLACK_APP_CONF_TOKEN\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="slack update"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --app-id | -i)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--app-id']="$2"
          shift
          shift
        else
          printf "%s\n" "--app-id requires an argument: --app-id, -i APP-ID" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --manifest | -m)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--manifest']="$2"
          shift
          shift
        else
          printf "%s\n" "--manifest requires an argument: --manifest, -m MANIFEST" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --target | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--target']="$2"
          shift
          shift
        else
          printf "%s\n" "--target requires an argument: --target, -t TARGET" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.required_flags_filter
  if [[ -z ${args['--app-id']+x} ]]; then
    printf "missing required flag: --app-id, -i APP-ID\n" >&2
    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--manifest']:-} ]] || args['--manifest']="slack.json"

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "slack") install_slack_command ;;
    "slack create") install_slack_create_command ;;
    "slack update") install_slack_update_command ;;
  esac
}

initialize
run "$@"
