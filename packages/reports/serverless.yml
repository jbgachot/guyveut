frameworkVersion: '3'
service: reports

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-3
  stage: ${opt:stage, 'dev'}
  timeout: 10
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
          # Resource: ${cf:stackName.outputKey}
          Resource: { 'Fn::ImportValue': 'TransactionsLogTableArn' }

functions:
  message:
    handler: handler.message
    events:
      - http:
          path: api/reports
          method: post
          cors: true
    environment:
      LOG_TABLE_NAME: transactions_log
      REACT_SYMBOL: ${file(../../.config.${self:provider.stage}.yml):REACT_SYMBOL}
      REACT_NEGATIVE_SYMBOL: ${file(../../.config.${self:provider.stage}.yml):REACT_NEGATIVE_SYMBOL}
      REWARD_SYMBOL: ${file(../../.config.${self:provider.stage}.yml):REWARD_SYMBOL}
      REWARD_NAME: ${file(../../.config.${self:provider.stage}.yml):REWARD_NAME}
      REWARD_PLURAL: ${file(../../.config.${self:provider.stage}.yml):REWARD_PLURAL}
      CLIENT_SIGNING_SECRET: ${file(../../.config.${self:provider.stage}.yml):CLIENT_SIGNING_SECRET}
      CLIENT_ID: ${file(../../.config.${self:provider.stage}.yml):CLIENT_ID}
      CLIENT_SECRET: ${file(../../.config.${self:provider.stage}.yml):CLIENT_SECRET}
      BOT_TOKEN: ${file(../../.config.${self:provider.stage}.yml):BOT_TOKEN}
      VERIFICATION_TOKEN: ${file(../../.config.${self:provider.stage}.yml):VERIFICATION_TOKEN}
      STAGE: ${file(../../.config.${self:provider.stage}.yml):STAGE}
  update:
    handler: events.update
    events:
      - http:
          path: api/action
          method: post
          cors: true
    environment:
      LOG_TABLE_NAME: transactions_log
      REACT_SYMBOL: ${file(../../.config.${self:provider.stage}.yml):REACT_SYMBOL}
      REACT_NEGATIVE_SYMBOL: ${file(../../.config.${self:provider.stage}.yml):REACT_NEGATIVE_SYMBOL}
      REWARD_SYMBOL: ${file(../../.config.${self:provider.stage}.yml):REWARD_SYMBOL}
      REWARD_NAME: ${file(../../.config.${self:provider.stage}.yml):REWARD_NAME}
      REWARD_PLURAL: ${file(../../.config.${self:provider.stage}.yml):REWARD_PLURAL}
      CLIENT_SIGNING_SECRET: ${file(../../.config.${self:provider.stage}.yml):CLIENT_SIGNING_SECRET}
      CLIENT_ID: ${file(../../.config.${self:provider.stage}.yml):CLIENT_ID}
      CLIENT_SECRET: ${file(../../.config.${self:provider.stage}.yml):CLIENT_SECRET}
      BOT_TOKEN: ${file(../../.config.${self:provider.stage}.yml):BOT_TOKEN}
      VERIFICATION_TOKEN: ${file(../../.config.${self:provider.stage}.yml):VERIFICATION_TOKEN}
      STAGE: ${file(../../.config.${self:provider.stage}.yml):STAGE}

# Auto rotation
plugins:
  - serverless-prune-plugin
  - serverless-offline
custom:
  prune:
    automatic: true
    includeLayers: true
    number: 3
